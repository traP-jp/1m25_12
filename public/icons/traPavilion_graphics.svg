<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="1042.8818"
   height="1404.999"
   viewBox="0 0 275.92914 371.73932"
   version="1.1"
   id="svg1"
   inkscape:version="1.3.2 (091e20e, 2023-11-25, custom)"
   xml:space="preserve"
   sodipodi:docname="traPavillion.svg"
   inkscape:export-filename="..\出力画像\ロゴ\traPavilion.png"
   inkscape:export-xdpi="96"
   inkscape:export-ydpi="96"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#ffffff"
     inkscape:document-units="px"
     showgrid="true"
     showguides="true"
     inkscape:zoom="0.34228516"
     inkscape:cx="1922.3737"
     inkscape:cy="1053.2154"
     inkscape:window-width="2560"
     inkscape:window-height="1334"
     inkscape:window-x="-11"
     inkscape:window-y="-11"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg1"><inkscape:grid
       id="grid1"
       units="px"
       originx="-3350.0373"
       originy="-3826.9331"
       spacingx="16.933333"
       spacingy="16.933333"
       empcolor="#0099e5"
       empopacity="0.30196078"
       color="#0099e5"
       opacity="0.14902"
       empspacing="4"
       dotted="false"
       gridanglex="30"
       gridanglez="30"
       visible="true" /></sodipodi:namedview><defs
     id="defs1"><style
       id="style1">.cls-1{fill:#005bac;}</style><style
       id="style1-0">.cls-1{fill:#ff7b19;}</style><style
       id="style1-1">.cls-1{fill:#14a39e;}.cls-2{fill:#fff;}</style><style
       id="style1-8">.cls-1{fill:#ff7b19;}</style><style
       id="style1-13">.cls-1{fill:#14a39e;}.cls-2{fill:#fff;}</style></defs><script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script><g
     id="g98"
     transform="translate(-3350.0374,-3826.9331)"><path
       id="path91406"
       style="fill:#ff4d89;fill-opacity:1;stroke:none;stroke-width:0.264583;stroke-linecap:round;stroke-linejoin:round;stroke-dashoffset:8"
       d="m 3488.2666,3826.9331 a 135.46666,135.46666 0 0 0 -67.7835,18.1839 135.46666,135.46666 0 0 1 67.7835,117.2828 135.46666,135.46666 0 0 1 117.2827,67.7829 135.46666,135.46666 0 0 0 18.1839,-67.7829 135.46666,135.46666 0 0 0 -9.0134,-48.5082 c -2.8362,4.7369 -6.2703,9.0187 -10.6712,12.7625 -6.0324,5.1316 -12.8307,9.4445 -20.0856,12.6261 -0.6389,0.2804 -1.2834,0.5514 -1.9316,0.8134 -6.3778,2.8694 -13.4367,4.4941 -20.8675,4.5641 h -0.5028 c -7.7721,0 -15.1477,-1.7013 -21.7728,-4.7506 -0.011,0 -0.02,-0.013 -0.029,-0.013 -1.653,-0.7246 -3.2605,-1.5333 -4.8183,-2.4189 -3.0444,2.293 -6.5753,3.8864 -10.3415,4.6431 l -16.5329,3.3212 c -1.1505,0.2311 -2.1653,-0.7837 -1.9342,-1.9342 l 3.3212,-16.5328 c 0.7918,-3.941 2.4997,-7.6249 4.9667,-10.7627 -0.3382,-0.6481 -0.6652,-1.3035 -0.9767,-1.9673 -3.1512,-6.7151 -4.9119,-14.2117 -4.9119,-22.1201 0,-6.8765 1.3311,-13.441 3.7507,-19.451 0.25,-0.7739 0.5183,-1.5425 0.8067,-2.3058 3.5388,-9.3649 9.8123,-17.4214 16.3277,-25.0228 2.7458,-3.2022 5.5626,-6.3607 8.6201,-9.2599 a 135.46666,135.46666 0 0 0 -48.8704,-9.1498 z m 60.0506,14.0575 c -0.1928,0.1284 -0.3663,0.2795 -0.5705,0.3938 -1.4989,0.8414 -3.2822,1.3334 -4.9321,1.8877 -2.9791,1.0014 -5.8114,2.4264 -8.4031,4.2044 -3.839,2.63 -7.1513,6.03 -9.6371,9.9643 -0.6046,0.9578 -0.8839,2.6485 0.2724,2.8205 0.3743,0.055 0.7513,-0.082 1.0278,-0.3416 2.4791,-2.331 4.9599,-4.6621 7.4404,-6.9944 1.2739,-1.1972 2.6257,-2.4393 4.3217,-2.8706 1.6946,-0.4313 3.8168,0.2779 4.3392,1.9461 0.6655,2.1286 -1.4421,4.0111 -3.2266,5.3485 -6.4665,4.8472 -11.8943,11.074 -15.8115,18.141 -0.5159,0.93 -0.8744,2.3725 0.2078,2.772 0.4881,0.1813 1.0384,0.048 1.4247,-0.3008 1.2184,-1.1033 2.6086,-2.221 4.253,-2.5451 0.3413,-0.067 0.6961,-0.094 1.048,-0.077 1.0821,0.052 2.1428,0.5053 2.7435,1.3891 1.5121,2.2264 -0.5941,5.0349 -2.2702,7.1396 -1.2375,1.5538 -2.2923,3.2514 -3.1481,5.0436 -0.7455,1.5614 -1.6505,3.3845 -1.6495,5.1398 0,2.661 0.5985,5.406 1.3699,7.9494 9e-4,0 0,0.01 0,0.01 5e-4,0 0,0 0,0.01 0.013,0.042 0.026,0.084 0.039,0.1266 v 0 c -0.013,-0.042 -0.025,-0.084 -0.038,-0.1266 0.013,0.043 0.024,0.089 0.037,0.1323 0.1759,0.5735 0.3665,1.1406 0.5715,1.7007 l 3.2644,-2.7534 6.4797,-5.4663 7.1836,-6.059 5.0958,-4.2985 8.355,-7.0466 c 0.01,-0.01 0.013,-0.01 0.02,-0.019 l 19.2051,-16.199 c 0.1304,-0.1096 0.3229,-0.1027 0.4449,0.017 0.1218,0.1195 0.1329,0.3121 0.025,0.4445 l -22.3748,27.5843 c 0,0.01 -0.01,0.015 -0.011,0.015 l -5.0932,6.2782 -6e-4,5e-4 -15.2305,18.7828 c 0.053,0.064 0.1057,0.1277 0.1591,0.1907 l 18.8004,-15.2451 v 0 c 2e-4,-2e-4 3e-4,-7e-4 5e-4,0 l 6.2767,-5.0896 5e-4,-5e-4 1.8882,-1.5317 5.6033,-4.5439 c 0.01,0 0.011,-0.013 0.017,-0.013 l 7.9825,-6.4735 c 0,0 0.01,-0.01 0.01,-0.01 l 12.1031,-9.8144 c 0.1326,-0.1079 0.3251,-0.097 0.4444,0.025 0.1193,0.1217 0.1266,0.3141 0.016,0.4444 l -23.2699,27.5854 v 0 l -15.8171,18.7502 -5e-4,6e-4 -3.2856,3.8964 v 5e-4 l -0.021,0.025 c 0.081,0.036 0.1622,0.072 0.2434,0.107 0.5162,0.2226 1.0378,0.4353 1.5673,0.632 0.1641,0.062 0.3297,0.1228 0.4951,0.1808 0.01,0.01 0.014,0.01 0.022,0.01 0.5093,0.1812 1.0252,0.3505 1.5451,0.508 0.098,0.03 0.1962,0.059 0.2941,0.087 0.1958,0.059 0.3927,0.1149 0.5911,0.1679 0.099,0.027 0.1985,0.054 0.2977,0.079 0.2976,0.078 0.5965,0.1527 0.8981,0.2237 0.3003,0.07 0.6036,0.136 0.908,0.2 0.1017,0.021 0.202,0.042 0.3038,0.061 0.1019,0.021 0.2041,0.041 0.306,0.058 0.087,0.017 0.1732,0.033 0.2604,0.048 0.6615,0.119 1.3293,0.2182 2.004,0.2962 0.1112,0.013 0.2226,0.026 0.3339,0.038 0.057,0.01 0.1146,0.01 0.1715,0.018 0.1217,0.012 0.2449,0.023 0.368,0.034 0.1389,0.013 0.2776,0.025 0.4165,0.036 h 0.051 c 0.1336,0.011 0.2669,0.019 0.4005,0.029 h 0.045 c 0.1428,0.01 0.2844,0.015 0.4273,0.025 0.1164,0.01 0.2342,0.016 0.3519,0.016 0.1827,0.01 0.3665,0.01 0.5504,0.02 0.1363,0.01 0.2725,0.01 0.4088,0.01 h 0.4986 0.01 0.4791 c 0.1468,0 0.295,-0.01 0.4418,-0.01 0.34,-0.01 0.6788,-0.023 1.0175,-0.042 0.1113,-0.01 0.2222,-0.011 0.3333,-0.021 0.06,0 0.1189,0 0.1783,-0.012 0.036,0 0.072,-0.01 0.1075,-0.01 0.1019,-0.01 0.2033,-0.014 0.3039,-0.024 0.1521,-0.012 0.3028,-0.026 0.4537,-0.041 h 0.044 c 0.1481,-0.014 0.2951,-0.029 0.4434,-0.046 0.1017,-0.011 0.2035,-0.023 0.3054,-0.036 0.1362,-0.015 0.2712,-0.032 0.4061,-0.052 0.2554,-0.034 0.5093,-0.071 0.7633,-0.1086 0.1111,-0.017 0.221,-0.035 0.3323,-0.054 0.1442,-0.024 0.2883,-0.048 0.4325,-0.074 0.098,-0.017 0.1957,-0.034 0.2935,-0.054 0.098,-0.018 0.1956,-0.036 0.2936,-0.056 0.097,-0.019 0.1943,-0.039 0.2909,-0.059 0.074,-0.014 0.1497,-0.03 0.2237,-0.046 0.048,-0.011 0.097,-0.021 0.1458,-0.032 0.168,-0.036 0.336,-0.074 0.5028,-0.1137 0.096,-0.021 0.1912,-0.044 0.2878,-0.069 0.176,-0.041 0.3522,-0.086 0.5282,-0.1323 0.029,-0.01 0.058,-0.013 0.087,-0.023 0.082,-0.021 0.1626,-0.042 0.2434,-0.066 0.1903,-0.052 0.3797,-0.1047 0.5689,-0.1587 0.7382,-0.213 1.4645,-0.4511 2.1802,-0.7131 0.2011,-0.074 0.3995,-0.1478 0.5979,-0.2248 1.5541,-0.5991 2.8442,-1.3628 4.0473,-2.5332 0.814,-0.7919 1.7469,-1.5113 2.9084,-1.6697 0.2619,-0.036 0.5228,-0.038 0.7793,-0.013 v 0 c 1.6735,0.1693 3.18,1.5687 3.5703,3.2422 0.5173,2.2066 -0.6823,4.6209 -2.5476,5.8684 -0.5555,0.3718 -0.9751,0.9235 -1.139,1.5704 -0.5351,2.1161 2.3706,1.1437 5.5459,-0.4661 0.7938,-0.4025 1.6043,-0.845 2.3823,-1.2888 2.3339,-1.3316 4.3733,-2.6769 4.7806,-3.0024 1.4461,-1.1549 2.9028,-2.4024 4.0922,-3.8298 4.6103,-5.5321 6.8867,-11.5237 7.1076,-14.0756 0.1112,-1.2952 0.4,-2.573 0.4925,-3.8695 0.1283,-1.7991 0.046,-2.6145 0.6336,-3.0272 0.6813,-0.4789 1.9023,-0.1623 2.6034,0.4925 0.4326,0.4048 0.8968,1.1532 0.8439,2.8148 -0.1429,4.4834 -3.8602,9.3493 -3.8086,11.2623 0,0.1693 0.027,0.6097 0.3137,0.8346 0.3202,0.2517 0.7873,0.1087 1.1457,-0.079 0.1058,-0.056 0.2088,-0.1137 0.308,-0.1757 1.8997,-1.1536 2.7609,-3.2188 3.2173,-5.3355 0.3652,-1.6881 0.5649,-3.2743 0.6734,-4.5972 0.1027,-1.2454 0.1178,-2.1185 0.1173,-2.7683 a 135.46666,135.46666 0 0 0 -6.0322,-11.1104 c -0.2456,1.1325 -0.6338,2.0631 -0.9999,2.7089 -0.3533,0.5805 -1.1452,0.7477 -1.7839,0.3979 l -2.7476,-1.4795 c -0.2013,-0.1066 -0.3653,-0.2617 -0.4687,-0.4517 -0.463,-0.8658 -0.8749,-2.0891 -0.4414,-3.3869 0.5095,-1.6785 1.8735,-2.3839 2.5942,-3.7884 a 135.46666,135.46666 0 0 0 -35.4872,-35.5678 c -5.8981,3.7832 -11.0656,8.5223 -15.3857,14.1128 0.3916,0.4123 0.6058,0.9878 0.5375,1.5973 -0.1225,1.0957 -1.1102,1.8848 -2.2061,1.7622 -1.0958,-0.1227 -1.8846,-1.1102 -1.7622,-2.2061 0.1228,-1.0959 1.1102,-1.8853 2.2061,-1.7626 0.2506,0.028 0.4842,0.1034 0.6956,0.2129 4.3125,-5.5831 9.4645,-10.3235 15.336,-14.1258 a 135.46666,135.46666 0 0 0 -5.5041,-3.5197 c -1.1083,1.8944 -2.5326,4.6501 -3.2437,7.1205 -0.3545,1.2762 -1.5756,2.1863 -2.9058,2.1673 -1.422,-0.021 -2.205,0.686 -3.0246,1.6403 -0.3989,0.475 -1.0561,0.5424 -1.4645,0.1338 l -2.2128,-2.2676 v 0 c -0.4198,-0.4404 -0.4244,-1.1864 -0.012,-1.6495 0.8463,-0.9297 1.4806,-1.7925 1.3632,-3.3543 -0.1127,-1.4672 0.7676,-2.7323 2.1162,-2.99 2.4802,-0.4283 5.1622,-1.2713 7.3556,-1.9885 a 135.46666,135.46666 0 0 0 -8.3308,-4.5031 z m 9.2842,5.0628 -5.6705,4.8203 c -0.117,0.114 -0.2742,0.1871 -0.4351,0.1721 -0.2626,-0.028 -0.5342,0.095 -0.6827,0.3664 -0.1123,0.209 -0.108,0.4753 0.01,0.6816 0.031,0.056 0.072,0.1058 0.1127,0.1478 0.2689,0.2745 0.701,0.2764 0.9767,0 0.1504,-0.1498 0.22,-0.3484 0.2093,-0.5421 -0.01,-0.1381 0.065,-0.3298 0.1638,-0.4268 l 5.8048,-4.9325 a 135.46666,135.46666 0 0 0 -0.4889,-0.2868 z m -147.2376,5.5206 a 135.46666,135.46666 0 0 0 -58.0295,110.5229 135.46666,135.46666 0 0 0 18.1493,67.7334 135.46666,135.46666 0 0 1 30.1144,-35.9136 93.133331,93.133331 0 0 1 -5.9304,-31.8203 93.133331,93.133331 0 0 1 51.185,-82.6725 124.88333,124.88333 0 0 0 -35.4888,-27.8499 z m 133.7805,4.147 c 0.1168,0 0.2334,0.037 0.34,0.1023 v 0 c 0.095,0.058 0.1885,0.1257 0.2749,0.2057 0.5119,0.4698 1.0239,0.942 1.5359,1.4118 0.6291,0.5784 1.4114,1.1126 1.4557,2.0454 0.027,0.4988 -0.1731,1.0658 -0.5498,1.4159 -0.018,0.018 -0.04,0.031 -0.057,0.047 -0.029,0.018 -0.058,0.03 -0.089,0.04 -0.016,0.011 -0.031,0.011 -0.046,0.011 h -0.053 c -0.082,0 -0.1573,-0.029 -0.217,-0.08 -0.02,-0.02 -0.04,-0.04 -0.057,-0.06 -0.01,0 -0.01,-0.013 -0.011,-0.013 -1.0349,-1.0547 -2.034,-2.1495 -3.0489,-3.2199 -0.084,-0.093 -0.1709,-0.1839 -0.2573,-0.2749 -0.2235,-0.2348 -0.4722,-0.5117 -0.2217,-0.8331 0.1152,-0.1484 0.2287,-0.2991 0.3328,-0.4542 0.1553,-0.2283 0.4132,-0.3576 0.6702,-0.3483 z m -1.8598,1.9482 c 0.1156,0 0.23,0.052 0.3157,0.1426 l 3.2225,3.3895 c 0.1911,0.2007 0.16,0.5208 -0.063,0.6852 -3.3312,2.4525 -6.3258,5.766 -8.7855,9.5059 -1.148,1.7463 -3.311,2.4596 -5.303,1.9146 -0.8333,-0.2288 -1.7108,-0.2855 -2.5683,-0.1814 -0.4366,0.055 -0.8664,0.1506 -1.2831,0.2858 -0.1438,0.049 -0.2813,0.1065 -0.4186,0.1705 -0.2482,0.1151 -0.4876,-0.1686 -0.337,-0.3969 h 0.01 c 0.1684,-0.2615 0.3387,-0.5205 0.5116,-0.7777 0.3634,-0.5339 0.7359,-1.0591 1.1214,-1.5777 0.8312,-1.1213 1.7083,-2.2073 2.6169,-3.2664 0.3125,-0.3613 0.6271,-0.7222 0.9462,-1.079 1.4249,-1.5932 2.9562,-3.0424 4.576,-4.576 l 0.5937,-0.5607 c 0.6029,-0.5717 1.3232,-1.0881 2.0877,-1.6376 0.819,-0.5875 1.6569,-1.1921 2.4387,-1.9172 h -6e-4 c 0.091,-0.085 0.2079,-0.1238 0.3235,-0.1194 z m 32.8042,7.09 -10.0801,8.5028 2.5994,0.723 z m -10.5601,9.0558 -2.3694,6.889 4.9945,-6.1588 z m -0.9137,0.6227 -4.8219,4.0669 2.3373,3.1569 z m 22.0271,0.8723 -9.2273,7.4827 0.7229,2.5993 z m -27.2262,3.7961 -2.1343,4.8385 4.4344,-1.7317 z m -0.9535,0.5225 -6.3525,5.3578 4.3144,-0.7385 z m 2.7316,3.498 -4.2276,1.651 -0.3726,4.0225 z m 15.6606,0.1204 -6.1567,4.9929 6.8869,-2.3683 z m -20.5677,1.6955 -4.5579,0.7803 4.1636,3.4773 z m -5.0927,1.1952 -0.9752,5.533 5.2917,-1.9275 z m 25.7679,0.6475 -7.2239,2.4841 3.157,2.3374 z m -7.7753,2.8986 -1.7311,4.4348 4.8379,-2.1347 z m -0.9136,0.5214 -4.2989,3.4866 -1.3752,1.1152 4.0231,-0.3726 z m -13.1206,0.3726 -4.946,1.8009 0.9901,3.0758 z m -5.5,2.2391 -4.3542,4.7031 5.3526,-1.603 z m 22.1201,0.1199 -4.6203,2.0386 -0.7385,4.3145 z m 27.3813,2.0438 c 0.2416,-0.01 0.5039,0.065 0.7736,0.2481 0.7751,0.5248 1.5505,1.0495 2.3255,1.574 0.339,0.2296 0.5522,0.603 0.5735,1.0118 0.1648,3.1388 0.023,9.7224 -3.7837,16.7029 -0.7703,1.4128 -1.8543,2.6593 -2.8872,3.8825 -0.8145,0.9646 -1.6766,1.898 -2.4851,2.8613 -0.8145,0.9708 -1.5877,1.9178 -2.559,2.7445 -0.7255,0.6175 -1.505,1.1716 -2.3275,1.6526 -0.3609,0.2114 -0.7821,0.4145 -1.1813,0.2904 -0.3051,-0.095 -0.489,-0.3694 -0.6429,-0.6748 -0.4682,-0.9296 -0.5528,-2.0806 -0.4583,-2.7244 0.3376,-2.2986 3.8693,-4.3254 6.4636,-7.6528 2.7872,-3.5745 3.7241,-7.6641 4.5465,-11.2541 0.3118,-1.3618 0.3918,-2.0466 0.4687,-2.9068 0.1264,-1.4112 -0.054,-2.7645 -0.076,-4.1672 -0.013,-0.7964 0.5249,-1.5627 1.2496,-1.588 z m -32.6962,0.1333 -4.2571,0.3943 3.4768,4.1631 z m -4.8002,0.7757 -1.9275,5.2911 5.5324,-0.9741 z m -0.8335,0.3566 -4.8788,3.9563 3.0763,0.9907 z m -33.2678,3.6535 c 0.013,0.055 0.025,0.1098 0.038,0.1643 0.016,0.068 0.033,0.1354 0.05,0.2031 -0.03,-0.1222 -0.059,-0.2446 -0.088,-0.3674 z m 27.9265,0.849 -1.6035,5.3537 4.7046,-4.3553 z m 9.5586,0.1685 -5.2855,0.9312 1.8733,3.1135 z m -5.8911,1.2077 -4.8556,4.4948 6.7629,-1.325 z m 1.5745,3.9088 -7.0486,1.3813 1.9456,4.6684 z m -7.5799,1.8267 -3.7072,5.456 5.6198,-0.8676 z m 1.5576,5.3129 -5.5589,0.8578 1.0821,4.4489 z m -77.0341,60.8242 c -26.293,2.4114 -51.1453,13.0942 -70.9869,30.5139 -11.3348,10.0809 -20.7383,22.1427 -27.7497,35.5942 -7.4604,14.3649 -12.057,30.0434 -13.5341,46.1626 16.1193,-1.4768 31.798,-6.0733 46.1631,-13.5336 13.4514,-7.0115 25.513,-16.4152 35.5937,-27.7502 17.4197,-19.8416 28.1025,-44.6939 30.5139,-70.9869 z m 94.2707,30.3501 a 93.133331,93.133331 0 0 1 -82.6724,51.185 93.133331,93.133331 0 0 1 -31.8198,-5.9299 135.46666,135.46666 0 0 1 -35.9136,30.1144 135.46666,135.46666 0 0 0 67.7334,18.1493 135.46666,135.46666 0 0 0 110.5229,-58.03 124.88333,124.88333 0 0 0 -27.8505,-35.4888 z" /><path
       d="m 3360.7529,4134.3786 h 22.6219 v 19.05 29.7656 q 0,11.9063 -10.7157,11.9063 h -21.4312 v -5.9531 h 13.0969 q 7.1437,0 7.1437,-5.9532 v -8.3343 h -10.7156 q -10.7156,0 -10.7156,-11.9063 v -16.6687 q 0,-11.9063 10.7156,-11.9063 z m 5.9531,34.5281 h 4.7625 v -15.4781 -13.0969 h -4.7625 q -4.7625,0 -4.7625,5.9532 v 16.6687 q 0,5.9531 4.7625,5.9531 z m 50.5354,-34.5281 v 5.9531 h -9.525 q -7.1437,0 -7.1437,5.9532 v 28.575 h -11.9063 v -28.575 q 0,-11.9063 10.7156,-11.9063 z m 14.0073,40.4813 q -10.7156,0 -10.7156,-11.9063 v -2.3812 q 0,-11.9063 10.7156,-11.9063 h 10.7156 v -2.3812 q 0,-5.9532 -7.1437,-5.9532 h -13.0969 v -5.9531 h 21.4313 q 10.7156,0 10.7156,11.9063 v 28.575 z m 5.9531,-20.2407 q -4.7625,0 -4.7625,5.9532 v 2.3812 q 0,5.9531 4.7625,5.9531 h 4.7625 v -14.2875 z m 44.5823,-20.2406 q 10.7156,0 10.7156,11.9063 v 16.6687 q 0,11.9063 -10.7156,11.9063 h -10.7156 v 23.8125 h -11.9063 v -64.2938 z m -5.9531,34.5281 q 4.7625,0 4.7625,-5.9531 v -16.6687 q 0,-5.9532 -4.7625,-5.9532 h -4.7625 v 28.575 z m 44.5823,-34.5281 q 10.7156,0 10.7156,11.9063 v 28.575 h -11.9062 v -28.575 q 0,-5.9532 -7.1438,-5.9532 h -2.3812 v 34.5282 h -11.9063 v -64.2938 h 11.9063 v 23.8125 z m 17.5948,0 h 11.9062 v 40.4813 h -11.9062 z m 6.1515,-23.8125 7.5407,7.5406 -7.5407,7.5407 -7.5406,-7.5407 z m 23.7464,64.2938 q -10.7156,0 -10.7156,-11.9063 v -16.6687 q 0,-11.9063 10.7156,-11.9063 h 21.4313 v 5.9531 h -15.4782 q -4.7625,0 -4.7625,5.9532 v 16.6687 q 0,5.9531 4.7625,5.9531 h 15.4782 v 5.9532 z m 47.3448,0 h -21.4313 v -5.9532 h 15.4782 q 4.7625,0 4.7625,-5.3578 0,-5.8539 -4.7625,-5.8539 h -5.9532 q -10.7156,0 -10.7156,-12.0054 0,-11.311 10.7156,-11.311 h 21.4313 v 5.9531 h -15.4781 q -4.7625,0 -4.7625,5.3579 0,6.0523 4.7625,6.0523 h 5.9531 q 10.7156,0 10.7156,11.807 0,11.311 -10.7156,11.311 z"
       id="text97"
       style="font-size:101.6px;line-height:1.8;font-family:GN-Kin-iro_SansSerif;-inkscape-font-specification:'GN-Kin-iro_SansSerif, Normal';letter-spacing:0.529167px;fill:#ff4d89;fill-opacity:1;stroke-width:0.264583;stroke-linecap:round;stroke-linejoin:round;stroke-dashoffset:8"
       aria-label="graphics" /></g></svg>
